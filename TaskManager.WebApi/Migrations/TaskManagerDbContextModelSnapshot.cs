// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.DataAccess.Concrete.EntityFramework.Contexts;

namespace TaskManager.WebApi.Migrations
{
    [DbContext(typeof(TaskManagerDbContext))]
    partial class TaskManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("TaskManager.Core.Entities.Concrete.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TaskManager.Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(175)")
                        .HasMaxLength(175);

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(5000)")
                        .HasMaxLength(5000);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(5000)")
                        .HasMaxLength(5000);

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskManager.Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.DailyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportanceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImportanceTypeId");

                    b.ToTable("DailyPlans");
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.DailyPlanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DailyPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DailyPlanId");

                    b.ToTable("DailyPlanDetails");
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.ImportanceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ImportanceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Önemli - Acil"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Önemli - Acil Değil"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Önemli Değil - Acil"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Önemli Değil - Acil Değil"
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.MonthlyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportanceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImportanceTypeId");

                    b.ToTable("MonthlyPlans");
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.MonthlyPlanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("MonthlyPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyPlanId");

                    b.ToTable("MonthlyPlanDetails");
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.WeeklyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportanceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImportanceTypeId");

                    b.ToTable("WeeklyPlans");
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.WeeklyPlanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("WeeklyPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyPlanId");

                    b.ToTable("WeeklyPlanDetails");
                });

            modelBuilder.Entity("TaskManager.Core.Entities.Concrete.RefreshToken", b =>
                {
                    b.HasOne("TaskManager.Core.Entities.Concrete.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RefreshTokens_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.HasOne("TaskManager.Core.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .HasConstraintName("FK_UserOperationClaims_OperationClaims")
                        .IsRequired();

                    b.HasOne("TaskManager.Core.Entities.Concrete.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserOperationClaims_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.DailyPlan", b =>
                {
                    b.HasOne("TaskManager.Entities.Concrete.ImportanceType", "ImportanceType")
                        .WithMany("DailyPlans")
                        .HasForeignKey("ImportanceTypeId")
                        .HasConstraintName("FK_DailyPlans_ImportanceTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.DailyPlanDetail", b =>
                {
                    b.HasOne("TaskManager.Entities.Concrete.DailyPlan", "DailyPlan")
                        .WithMany("DailyPlanDetails")
                        .HasForeignKey("DailyPlanId")
                        .HasConstraintName("FK_DailyPlanDetails_DailyPlans")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.MonthlyPlan", b =>
                {
                    b.HasOne("TaskManager.Entities.Concrete.ImportanceType", "ImportanceType")
                        .WithMany("MonthlyPlans")
                        .HasForeignKey("ImportanceTypeId")
                        .HasConstraintName("FK_MonthlyPlans_ImportanceTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.MonthlyPlanDetail", b =>
                {
                    b.HasOne("TaskManager.Entities.Concrete.MonthlyPlan", "MonthlyPlan")
                        .WithMany("MonthlyPlanDetails")
                        .HasForeignKey("MonthlyPlanId")
                        .HasConstraintName("FK_MonthlyPlanDetails_MonthlyPlans")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.WeeklyPlan", b =>
                {
                    b.HasOne("TaskManager.Entities.Concrete.ImportanceType", "ImportanceType")
                        .WithMany("WeeklyPlans")
                        .HasForeignKey("ImportanceTypeId")
                        .HasConstraintName("FK_WeeklyPlans_ImportanceTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Concrete.WeeklyPlanDetail", b =>
                {
                    b.HasOne("TaskManager.Entities.Concrete.WeeklyPlan", "WeeklyPlan")
                        .WithMany("WeeklyPlanDetails")
                        .HasForeignKey("WeeklyPlanId")
                        .HasConstraintName("FK_WeeklyPlanDetails_WeeklyPlans")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
